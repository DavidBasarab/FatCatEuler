class Problem2 < EulerProblem

  attr_accessor :terms
  attr_accessor :max_value

  def initialize
    @max_value = 0
    @next_total = 0
    @terms = 3
    @prev_total = 0
  end

  def answer
    begin
      @terms = @terms + 1
      # puts "terms = #{@terms} || prev_total = #{@prev_total} || next_total = #{@next_total} ||  even_sequence = #{nice_even_sequence_string}"
    end while sequence.last < @max_value
    @terms = @terms - 1
    sum_even_sequence
  end

  def nice_even_sequence_string
    nice = "[ "
    even_sequence.each { |n|
      nice = "#{nice} #{n}"
    }
    nice = "#{nice} ]"
    nice
  end


    def description
    "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.."
  end

  def sequence
    determine_full_sequence
  end

  def even_sequence
    sequence.select  { |n| n % 2 == 0}
  end

  def sum_even_sequence
    total = 0
    even_sequence.each { |n|
      total = n + total
    }
    total
  end

  def determine_full_sequence
    initialize_full_sequence_array
    (3).upto(@terms) { |i|
      determine_next_sequence_value
    }
    @full_sequence
  end

  def initialize_full_sequence_array
    @full_sequence = Array.new
    @full_sequence << 1
    @full_sequence << 2
  end

  def determine_next_sequence_value
    new_value = (@full_sequence[@full_sequence.length - 1] +@full_sequence[@full_sequence.length - 2])
    @full_sequence << new_value
  end

end